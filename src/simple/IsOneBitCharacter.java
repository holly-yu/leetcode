package simple;

/**
 * 717. 1比特与2比特字符
 *
 * 有两种特殊字符。第一种字符可以用一比特0来表示。第二种字符可以用两比特(10 或 11)来表示。
 * 现给一个由若干比特组成的字符串。问最后一个字符是否必定为一个一比特字符。给定的字符串总是由0结束。
 *
 * 示例 1:
 * 输入:
 * bits = [1, 0, 0]
 * 输出: True
 * 解释:
 * 唯一的编码方式是一个两比特字符和一个一比特字符。所以最后一个字符是一比特字符。
 *
 * 示例 2:
 * 输入:
 * bits = [1, 1, 1, 0]
 * 输出: False
 * 解释:
 * 唯一的编码方式是两比特字符和两比特字符。所以最后一个字符不是一比特字符。
 *
 * 注意:
 * 1 <= len(bits) <= 1000.
 * bits[i] 总是0 或 1.
 * */

public class IsOneBitCharacter {
    /**
     * 二比特字符总是以1开头，一比特字符只是一个“0”。遍历数组，所以遇到1即可往后跳两个位置，遇到0（即为一比特字符）往后跳一个位置。
     * 如果某次遇到1跳两个位置直接跳到了数组外，说明按这样遍历，最后一个字符是二比特字符，不符合题意要求，返回false。（如：1110最后两位是10，最后一位0只能是二比特字符，不符合要求；
     * 如：11110，遇到第三个1就会跳到第五个位置，这样就是符合题意要求的）
     */

    public boolean isOneBitCharacter(int[] bits) {
        boolean flag = true;
        for(int i = 0; i < bits.length; i ++){
            if(bits[i] == 0){
                continue;
            }
            if(bits[i] == 1){
                i++;
                if(i+1 == bits.length){
                    flag = false;
                }
            }

        }
        return flag;
    }
}
