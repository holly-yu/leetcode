package simple;

/**
 * 268. 丢失的数字
 *
 * 给定一个包含 [0, n]中n个数的数组 nums ，找出 [0, n] 这个范围内没有出现在数组中的那个数。
 *
 * 进阶：
 * 你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题?
 *
 * 示例 1：
 * 输入：nums = [3,0,1]
 * 输出：2
 * 解释：n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。
 *
 * 示例 2：
 * 输入：nums = [0,1]
 * 输出：2
 * 解释：n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。
 *
 * 示例 3：
 * 输入：nums = [9,6,4,2,3,5,7,0,1]
 * 输出：8
 * 解释：n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。
 *
 * 示例 4：
 * 输入：nums = [0]
 * 输出：1
 * 解释：n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。
 *
 * 提示：
 * n == nums.length
 * 1 <= n <= 104
 * 0 <= nums[i] <= n
 * nums 中的所有数字都 独一无二
 * */

public class MissingNumber {
    /**
     * 思路就是原地修改数组，对出现过的数字所对应的索引的数+(n+1)，这样最后小于(n+1)也就是没加过的数对应的索引就是结果。
     * 由于数组长度是n-1，所需要表示的数总共有n个，所以需要额外一个表示数n的变量。
     * */
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int nn = 0;
        int res = -1;
        for(int i = 0; i < n; i ++){
            if(nums[i] % (n + 1) == n){
                nn += n+1;
            }
            else
                nums[nums[i] % (n + 1)] += n + 1;

        }
        if(nn < n+1){
            res = n;
        }
        else{
            for(int i = 0; i < n; i ++){
                if(nums[i] < n + 1){
                    res = i;
                }
            }
        }
        return res;
    }

    /**
     * 位运算:
     * 由于异或运算（XOR）满足结合律，并且对一个数进行两次完全相同的异或运算会得到原来的数，因此我们可以通过异或运算找到缺失的数字。
     *
     * 对nums数组所有数进行一次异或，再对0~n每个数进行一次异或，把两个结果进行一次异或，得到的即是结果。
     * 因为没有缺失的数字在计算中出现了两次，而缺失的数字只出现过一次，结果就是这个缺失的数字。
     *
     * */
}
